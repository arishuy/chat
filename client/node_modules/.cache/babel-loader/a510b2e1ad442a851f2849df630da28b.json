{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\";\nexport const getAllChatsAsync = createAsyncThunk(\"chats/getAllchatAsync\", async () => {\n  const response = await Axios.get(\"http://localhost:5000/api/chat\", {\n    headers: {\n      Authorization: localStorage.getItem(\"token\")\n    }\n  });\n  const chats = response.data;\n  console;\n  return {\n    chats\n  };\n}); // export const AddNewTaskAsync = createAsyncThunk(\n//   \"tasks/AddNewTaskAsync\",\n//   async (payload) => {\n//     const response = await Axios.post(\n//       \"http://localhost:5000/api/v1/tasks\",\n//       payload\n//     );\n//     const task = response.data;\n//     return task;\n//   }\n// );\n// export const deleteTaskAsync = createAsyncThunk(\n//   \"tasks/deleteTaskAsync\",\n//   async (payload) => {\n//     const id = payload.id;\n//     const response = await Axios.delete(\n//       `http://localhost:5000/api/v1/tasks/${id}`\n//     );\n//     return payload;\n//   }\n// );\n// export const toggleIsdoneAsync = createAsyncThunk(\n//   \"tasks/toggleIsdoneAsync\",\n//   async (payload) => {\n//     const id = payload.id;\n//     const newPayload = {\n//       content: payload.content,\n//       isdone: payload.isdone,\n//     };\n//     const response = await Axios.patch(\n//       `http://localhost:5000/api/v1/tasks/${id}`,\n//       { content: payload.content, isdone: payload.isdone }\n//     );\n//     console.log(newPayload);\n//     return payload;\n//   }\n// );\n\nconst ChatSlice = createSlice({\n  name: \"chats\",\n  initialState: [],\n  reducers: {},\n  extraReducers: {\n    [getAllChatsAsync.fulfilled]: (state, action) => {\n      console.log(\"fetching data successfully\");\n      return action.payload.tasks;\n    }\n  }\n});\nexport const {\n  getAllChats\n} = ChatSlice.actions;\nexport default ChatSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Axios","getAllChatsAsync","response","get","headers","Authorization","localStorage","getItem","chats","data","console","ChatSlice","name","initialState","reducers","extraReducers","fulfilled","state","action","log","payload","tasks","getAllChats","actions","reducer"],"sources":["D:/WEB CODE LIB/Chat-App/chat/client/src/redux/Slices/ChatSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Axios from \"axios\";\r\nexport const getAllChatsAsync = createAsyncThunk(\r\n  \"chats/getAllchatAsync\",\r\n  async () => {\r\n    const response = await Axios.get(\"http://localhost:5000/api/chat\", {\r\n      headers:{Authorization:localStorage.getItem(\"token\")}\r\n    });\r\n    const chats = response.data;\r\n    console\r\n    return { chats };\r\n  }\r\n);\r\n// export const AddNewTaskAsync = createAsyncThunk(\r\n//   \"tasks/AddNewTaskAsync\",\r\n//   async (payload) => {\r\n//     const response = await Axios.post(\r\n//       \"http://localhost:5000/api/v1/tasks\",\r\n//       payload\r\n//     );\r\n//     const task = response.data;\r\n//     return task;\r\n//   }\r\n// );\r\n// export const deleteTaskAsync = createAsyncThunk(\r\n//   \"tasks/deleteTaskAsync\",\r\n//   async (payload) => {\r\n//     const id = payload.id;\r\n//     const response = await Axios.delete(\r\n//       `http://localhost:5000/api/v1/tasks/${id}`\r\n//     );\r\n//     return payload;\r\n//   }\r\n// );\r\n// export const toggleIsdoneAsync = createAsyncThunk(\r\n//   \"tasks/toggleIsdoneAsync\",\r\n//   async (payload) => {\r\n//     const id = payload.id;\r\n//     const newPayload = {\r\n//       content: payload.content,\r\n//       isdone: payload.isdone,\r\n//     };\r\n//     const response = await Axios.patch(\r\n//       `http://localhost:5000/api/v1/tasks/${id}`,\r\n//       { content: payload.content, isdone: payload.isdone }\r\n//     );\r\n//     console.log(newPayload);\r\n//     return payload;\r\n//   }\r\n// );\r\n\r\nconst ChatSlice = createSlice({\r\n  name: \"chats\",\r\n  initialState: [],\r\n  reducers: {\r\n  },\r\n    extraReducers: {\r\n        [getAllChatsAsync.fulfilled]: (state, action) => { \r\n             console.log(\"fetching data successfully\");\r\n            return action.payload.tasks;\r\n        }\r\n  },\r\n});\r\nexport const {getAllChats} = ChatSlice.actions;\r\nexport default ChatSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAC9C,uBAD8C,EAE9C,YAAY;EACV,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,gCAAV,EAA4C;IACjEC,OAAO,EAAC;MAACC,aAAa,EAACC,YAAY,CAACC,OAAb,CAAqB,OAArB;IAAf;EADyD,CAA5C,CAAvB;EAGA,MAAMC,KAAK,GAAGN,QAAQ,CAACO,IAAvB;EACAC,OAAO;EACP,OAAO;IAAEF;EAAF,CAAP;AACD,CAT6C,CAAzC,C,CAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,SAAS,GAAGb,WAAW,CAAC;EAC5Bc,IAAI,EAAE,OADsB;EAE5BC,YAAY,EAAE,EAFc;EAG5BC,QAAQ,EAAE,EAHkB;EAK1BC,aAAa,EAAE;IACX,CAACd,gBAAgB,CAACe,SAAlB,GAA8B,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC5CR,OAAO,CAACS,GAAR,CAAY,4BAAZ;MACD,OAAOD,MAAM,CAACE,OAAP,CAAeC,KAAtB;IACH;EAJU;AALW,CAAD,CAA7B;AAYA,OAAO,MAAM;EAACC;AAAD,IAAgBX,SAAS,CAACY,OAAhC;AACP,eAAeZ,SAAS,CAACa,OAAzB"},"metadata":{},"sourceType":"module"}